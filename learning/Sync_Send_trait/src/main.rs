// Sync와 Send 트레잇을 이용한 확장 가능한 동시성

// 러스트 언어는 매우 적은 동시성 기능을 갖고 있음. 사실 이전에 한건 다 표준 라이브러리임
// 사실, 이건 트레잇을 사용하여 나만의 동시성 기능을 작성하거나, 기존의 것을 개선할 수 있음을 의미!
// ->근데 일단 언어에 내재된 것은 적음...



// 언어에 내재된 두개의 동시성 개념: std::marker의 트레잇 "Sync"와 "Send"

// 1. Send를 사용하여 스레드 사이에 소유권 이전을 허용하기

// std::marker::Send 트레잇은 Send가 구현된 타입의 소유권이 스레드 사이에서 이전될 수 있음을 의미
// 거의 대부분의 러스트 타입이 Send를 구현하나, 메모리 공유 상태와 lock을 다룰 때 등장했던
// Rc<T>처럼, 오류를 야기할 가능성이 있는 애들은 구현하지 않고있음.
// -> Rc<T>는 스레드 안전성으로 인한 성능 저하를 감수하지 않아도 되는 단일 스레드 경우 사용하도록 구현
// 전체적으로, 로우 포인터(raw pointer)등을 제외한 거의 모든 타입이 Send타입임.
// Send 타입으로 구성된 타입은 자동적으로 Send로 마킹됨! 


// 2. Sync를 사용하여 여러 스레드로부터의 접근을 허용하기

// Sync 마커 트레잇은 "Sync가 구현되어있다면, 여러 스레드로부터 안전하게 참조 가능함"을 의미!
// -> 즉, 만일 &T가 Send이면, T 또한 Sync임.
//    따라서, Send와 유사하게, 기초타입들은 Sync하고, Sync한 타입들로 전체가 구성된 타입 또한 Sync함


// 3. Sync와 Send를 손수 구현하는 것은 안전하지 않다!

// 당연한 얘기



// 동시성&병렬성 종합

// 메시지 패싱을 위한 "채널"
// 동시적 맥락에서 사용하는 "Mutex<T>", "Arc<T>"
// 탄탄한 타입 시스템과 빌림 검사기의 유효성 보장

// -> 이를 활용하여 컴파일이 된다면, 거의 모든 상황에서 행복하게 동작함!
